import Loading from "@components/Loading";
import TransactionsTable from "@components/TransactionTable";
import { Add, Receipt, Search } from "@mui/icons-material";
import {
  AppBar,
  Box,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogContentText,
  DialogTitle,
  Drawer,
  Grid,
  List,
  ListItem,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  TextField,
  Toolbar,
  Typography,
} from "@mui/material";
import { LocalizationProvider } from "@mui/x-date-pickers";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import axios from "axios";
import dayjs, { Dayjs } from "dayjs";
import _ from "lodash";
import Head from "next/head";
import { useRouter } from "next/router";
import { useCallback, useEffect, useState } from "react";

interface ListTransaction {
  id: number;
  nomor_transaksi: string;
  customer: string;
  total_transaksi: number;
  tanggal_transaksi: number;
}

export default function Home() {
  const router = useRouter();
  const [startDate, setStartDate] = useState<Dayjs | null>(null);
  const [endDate, setEndDate] = useState<Dayjs | null>(null);
  const [nomorTransaksi, setNomorTransaksi] = useState("");
  const [listTransaction, setListTransaction] = useState<ListTransaction[]>([]);
  const [showDialogDelete, setShowDialogDelete] = useState(false);
  const [selectedTransaction, setSelectedTransaction] = useState<number | null>(
    null
  );
  const [isLoading, setIsLoading] = useState(true);

  const getTransactions = async (keyword?: string) => {
    setIsLoading(true);
    try {
      const response = await axios.get("/api/transactions/list", {
        params: {
          startDate: startDate ? dayjs(startDate).format("YYYY-MM-DD") : "",
          endDate: endDate ? dayjs(endDate).format("YYYY-MM-DD") : "",
          search: keyword,
        },
      });
      setIsLoading(false);
      setListTransaction(response.data);
    } catch (error) {
      setIsLoading(false);
      console.error("Error fetching transactions:", error);
    }
  };

  const handleDeleteTransaction = async () => {
    try {
      await axios.delete(`/api/transactions/${selectedTransaction}`, {});
      getTransactions();
      setShowDialogDelete(false);
    } catch (error) {
      console.error("Error fetching transactions:", error);
    }
  };

  useEffect(() => {
    getTransactions();
  }, []);

  const delayedQuery = useCallback(
    _.debounce((keyword: string) => {
      getTransactions(keyword);
    }, 500),
    []
  );

  const onTypeSearch = (keyword: string) => {
    setNomorTransaksi(keyword);
    if (nomorTransaksi) {
      delayedQuery(keyword);
    }
  };

  const handleLogout = () => {
    localStorage.clear();
    router.push("/login");
  };

  return (
    <>
      <Head>
        <title>List Transaction</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Box sx={{ display: "flex" }}>
        <AppBar
          position="fixed"
          sx={{ width: `calc(100% - 240px)`, ml: `240px` }}
        >
          <Toolbar>
            <Box
              sx={{
                display: "flex",
                alignItems: "center",
                justifyContent: "space-between",
                width: "100%",
              }}
            >
              <Typography variant="h6" noWrap component="div">
                Dashboard
              </Typography>
              <Button
                variant="outlined"
                color="secondary"
                disableElevation
                sx={{ width: "10%" }}
                onClick={handleLogout}
              >
                Logout
              </Button>
            </Box>
          </Toolbar>
        </AppBar>
        <Drawer
          sx={{
            width: 240,
            flexShrink: 0,
            "& .MuiDrawer-paper": {
              width: 240,
              boxSizing: "border-box",
            },
          }}
          variant="permanent"
          anchor="left"
        >
          <Toolbar>
            <Box sx={{ textAlign: "center", padding: "16px" }}>
              <img src="./logo-nexa.png" style={{ width: "70%" }} />
            </Box>
          </Toolbar>
          <List>
            <ListItem disablePadding selected>
              <ListItemButton>
                <ListItemIcon>
                  <Receipt sx={{ color: "white" }} />
                </ListItemIcon>
                <ListItemText>
                  <Typography sx={{ fontWeight: 600, color: "white" }}>
                    Transaction
                  </Typography>
                </ListItemText>
              </ListItemButton>
            </ListItem>
          </List>
        </Drawer>
        <Box
          component="main"
          sx={{
            flexGrow: 1,
            bgcolor: "background.default",
            p: 3,
            marginTop: "70px",
          }}
        >
          <Box>
            <Grid container spacing={2}>
              <LocalizationProvider dateAdapter={AdapterDayjs}>
                <Grid item xs={2}>
                  <DatePicker
                    value={endDate}
                    onChange={(newValue) => setStartDate(newValue)}
                    sx={{ width: "100%" }}
                  />
                </Grid>
                <Grid item xs={0.3}>
                  <Typography>to</Typography>
                </Grid>
                <Grid item xs={2}>
                  <DatePicker
                    value={endDate}
                    onChange={(newValue) => setEndDate(newValue)}
                    sx={{ width: "100%" }}
                  />
                </Grid>
                <Grid item xs={1.2}>
                  <Button
                    onClick={() => getTransactions()}
                    variant="contained"
                    disableElevation
                    sx={{ gap: "8px" }}
                  >
                    <Search />
                    Filter
                  </Button>
                </Grid>
              </LocalizationProvider>
              <Grid item xs={6.5}>
                <Box sx={{ textAlign: "right" }}>
                  <Button
                    variant="contained"
                    sx={{ width: "40%", gap: "8px" }}
                    disableElevation
                    onClick={() => router.push("/transaction/create")}
                  >
                    <Add />
                    Create Transaction
                  </Button>
                </Box>
              </Grid>
            </Grid>
            <Grid container spacing={2}>
              <Grid item xs={5.8}>
                <TextField
                  id="outlined-basic"
                  variant="outlined"
                  onChange={(e) => onTypeSearch(e.target.value)}
                  fullWidth
                  placeholder="Search Transaction Number"
                  sx={{ marginTop: "16px" }}
                />
              </Grid>
            </Grid>
          </Box>
          <Box sx={{ marginTop: "16px" }}>
            <TransactionsTable
              data={listTransaction}
              handleShowDialogDelete={(id) => {
                setShowDialogDelete(true);
                setSelectedTransaction(id);
              }}
            />
          </Box>
        </Box>
      </Box>
      <Dialog
        open={showDialogDelete}
        onClose={() => setShowDialogDelete(false)}
        aria-labelledby="alert-dialog-title"
        aria-describedby="alert-dialog-description"
      >
        <DialogTitle id="alert-dialog-title">Delete Transaction</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-description">
            Are you sure to delete this transaction?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setShowDialogDelete(false)}>Cancel</Button>
          <Button
            onClick={() => handleDeleteTransaction()}
            autoFocus
            variant="contained"
            disableElevation
            color="secondary"
          >
            Delete
          </Button>
        </DialogActions>
      </Dialog>
      <Loading open={isLoading} onClose={() => setIsLoading(false)} />
    </>
  );
}
